// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum MessageId

typedef GPB_ENUM(MessageId) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  MessageId_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 用户报告自身id/appkey等, 请求nonce */
  MessageId_MsgTypeInitReq = 0,
  MessageId_MsgTypeInitRep = 1,

  /** 用户使用passphase认证 */
  MessageId_MsgTypeAuthReq = 2,
  MessageId_MsgTypeAuthRep = 3,

  /** 用户请求发送SendMessage */
  MessageId_MsgTypeSendReq = 4,
  MessageId_MsgTypeSendRep = 5,

  /** 用户请求发送Feedback */
  MessageId_MsgFeedbackReq = 6,
  MessageId_MsgFeedbackRep = 7,

  /** 向用户发送的Message */
  MessageId_MsgSendToUsr = 8,

  /** 向用户发送的Message */
  MessageId_MsgUserPing = 9,

  /** 向用户发送的Message */
  MessageId_MsgUserPong = 10,

  /** 连接断开 */
  MessageId_MsgConnectionClosed = 11,

  /** 用户上传文件必须先获取key */
  MessageId_MsgTypeGetKeyReq = 12,
  MessageId_MsgTypeGetKeyRep = 13,
};

GPBEnumDescriptor *MessageId_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL MessageId_IsValidValue(int32_t value);

#pragma mark - Enum CloseFlag

typedef GPB_ENUM(CloseFlag) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  CloseFlag_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 用户主动关闭连接 -- 可能是客户端异常或页面关闭、刷新等 */
  CloseFlag_UserMadeClose = 0,

  /** 用户超时无响应而断开 -- 可能是与客户端的网络中断 */
  CloseFlag_TimeoutClose = 1,

  /** 重复登录引起的断开 */
  CloseFlag_DuplicateClose = 2,
};

GPBEnumDescriptor *CloseFlag_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL CloseFlag_IsValidValue(int32_t value);

#pragma mark - MessageRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface MessageRoot : GPBRootObject
@end

#pragma mark - SendMessage

typedef GPB_ENUM(SendMessage_FieldNumber) {
  SendMessage_FieldNumber_AppKey = 1,
  SendMessage_FieldNumber_From = 2,
  SendMessage_FieldNumber_To = 3,
  SendMessage_FieldNumber_ChatType = 4,
  SendMessage_FieldNumber_MsgType = 5,
  SendMessage_FieldNumber_CreateTime = 6,
  SendMessage_FieldNumber_Content = 7,
  SendMessage_FieldNumber_AudioDuration = 8,
  SendMessage_FieldNumber_Thumbnail = 9,
  SendMessage_FieldNumber_SourceType = 10,
  SendMessage_FieldNumber_Sequence = 11,
  SendMessage_FieldNumber_Id_p = 12,
  SendMessage_FieldNumber_Status = 13,
};

/**
 * 发送消息
 **/
@interface SendMessage : GPBMessage

/** 客户编号 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *appKey;

/** 发送者 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *from;

/** 接收消息者 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *to;

/** 消息类型 0 私聊 1 群聊 ... */
@property(nonatomic, readwrite) uint32_t chatType;

/** 消息类型：音频，视频，图片，表情，文件， 系统消息 */
@property(nonatomic, readwrite) uint32_t msgType;

/** 创建时间 */
@property(nonatomic, readwrite) uint32_t createTime;

/** 消息内容 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *content;

/** 音频时长  //如果是音频消息 需要该参数 */
@property(nonatomic, readwrite) uint32_t audioDuration;

/** 缩略图URL */
@property(nonatomic, readwrite, copy, null_resettable) NSString *thumbnail;

/** 渠道来源 */
@property(nonatomic, readwrite) uint32_t sourceType;

/** sequence number */
@property(nonatomic, readwrite) uint64_t sequence;

/** 消息Id */
@property(nonatomic, readwrite) uint64_t id_p;

/** 消息状态 0 有效 1 撤回 2 删除 */
@property(nonatomic, readwrite) uint32_t status;

@end

#pragma mark - MessageReply

typedef GPB_ENUM(MessageReply_FieldNumber) {
  MessageReply_FieldNumber_ErrorCode = 1,
  MessageReply_FieldNumber_ErrorString = 2,
  MessageReply_FieldNumber_Sequence = 3,
};

@interface MessageReply : GPBMessage

/** 返回值，正常为0 */
@property(nonatomic, readwrite) int32_t errorCode;

/** 错误原因， 如果ErrorCode等于0，ErrorString为空 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *errorString;

/** sequence number */
@property(nonatomic, readwrite) uint64_t sequence;

@end

#pragma mark - Feedback

typedef GPB_ENUM(Feedback_FieldNumber) {
  Feedback_FieldNumber_AppKey = 1,
  Feedback_FieldNumber_UserId = 2,
  Feedback_FieldNumber_Id_p = 3,
};

@interface Feedback : GPBMessage

/** 客户编号 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *appKey;

/** 用户id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** 消息Id（收件箱id） */
@property(nonatomic, readwrite) uint64_t id_p;

@end

#pragma mark - FeedbackAck

typedef GPB_ENUM(FeedbackAck_FieldNumber) {
  FeedbackAck_FieldNumber_ErrorCode = 1,
  FeedbackAck_FieldNumber_ErrorString = 2,
};

@interface FeedbackAck : GPBMessage

/** 返回值，正常为0 */
@property(nonatomic, readwrite) int32_t errorCode;

/** 错误原因， 如果ErrorCode等于0，ErrorString为空 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *errorString;

@end

#pragma mark - DuplicateLogin

typedef GPB_ENUM(DuplicateLogin_FieldNumber) {
  DuplicateLogin_FieldNumber_AppKey = 1,
  DuplicateLogin_FieldNumber_Id_p = 2,
  DuplicateLogin_FieldNumber_Serverid = 3,
  DuplicateLogin_FieldNumber_Ts = 4,
};

/**
 * 重复登陆通知
 **/
@interface DuplicateLogin : GPBMessage

/** 客户编号 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *appKey;

/** 用户ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** access sever id */
@property(nonatomic, readwrite) uint32_t serverid;

/** 时间戳 */
@property(nonatomic, readwrite) int64_t ts;

@end

#pragma mark - HeartBeat

/**
 * 心跳
 **/
@interface HeartBeat : GPBMessage

@end

#pragma mark - HeartBeatAck

@interface HeartBeatAck : GPBMessage

@end

#pragma mark - SyncMessage

typedef GPB_ENUM(SyncMessage_FieldNumber) {
  SyncMessage_FieldNumber_AppKey = 1,
  SyncMessage_FieldNumber_UserId = 2,
  SyncMessage_FieldNumber_Id_p = 3,
};

/**
 * 消息同步
 **/
@interface SyncMessage : GPBMessage

/** 客户编号 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *appKey;

/** 用户ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** 消息Id（收件箱id） */
@property(nonatomic, readwrite) uint64_t id_p;

@end

#pragma mark - SyncMessageAck

@interface SyncMessageAck : GPBMessage

@end

#pragma mark - InitReq

typedef GPB_ENUM(InitReq_FieldNumber) {
  InitReq_FieldNumber_UserId = 1,
  InitReq_FieldNumber_SrcType = 2,
  InitReq_FieldNumber_AppKey = 3,
};

/**
 * 用户与接入服务器建立连接后, 需要首先发送该消息
 **/
@interface InitReq : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

@property(nonatomic, readwrite) uint32_t srcType;

@property(nonatomic, readwrite, copy, null_resettable) NSString *appKey;

@end

#pragma mark - InitRep

typedef GPB_ENUM(InitRep_FieldNumber) {
  InitRep_FieldNumber_Nonce = 1,
};

/**
 * 针对InitReq的回复消息, 为本次认证过程提供nonce
 **/
@interface InitRep : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *nonce;

@end

#pragma mark - AuthReq

typedef GPB_ENUM(AuthReq_FieldNumber) {
  AuthReq_FieldNumber_Passphase = 1,
};

/**
 * 用户收到nonce后, 按算法
 * hash(hash(password) + nonce) 生成 passphase
 * 然后向接入服务器发送AuthReq
 **/
@interface AuthReq : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *passphase;

@end

#pragma mark - GeneralReply

typedef GPB_ENUM(GeneralReply_FieldNumber) {
  GeneralReply_FieldNumber_ErrorCode = 1,
  GeneralReply_FieldNumber_ErrorString = 2,
};

/**
 * 对用户的回复
 * 用户发送AuthReq和SendMessage包都会收到这个回复包
 **/
@interface GeneralReply : GPBMessage

/** 返回值，正常为0 */
@property(nonatomic, readwrite) int32_t errorCode;

/** 错误原因， 如果ErrorCode等于0，ErrorString为空 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *errorString;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
