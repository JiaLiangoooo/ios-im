// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Message.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MessageRoot

@implementation MessageRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MessageRoot_FileDescriptor

static GPBFileDescriptor *MessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum MessageId

GPBEnumDescriptor *MessageId_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "MsgTypeInitReq\000MsgTypeInitRep\000MsgTypeAut"
        "hReq\000MsgTypeAuthRep\000MsgTypeSendReq\000MsgTy"
        "peSendRep\000MsgFeedbackReq\000MsgFeedbackRep\000"
        "MsgSendToUsr\000MsgUserPing\000MsgUserPong\000Msg"
        "ConnectionClosed\000MsgTypeGetKeyReq\000MsgTyp"
        "eGetKeyRep\000";
    static const int32_t values[] = {
        MessageId_MsgTypeInitReq,
        MessageId_MsgTypeInitRep,
        MessageId_MsgTypeAuthReq,
        MessageId_MsgTypeAuthRep,
        MessageId_MsgTypeSendReq,
        MessageId_MsgTypeSendRep,
        MessageId_MsgFeedbackReq,
        MessageId_MsgFeedbackRep,
        MessageId_MsgSendToUsr,
        MessageId_MsgUserPing,
        MessageId_MsgUserPong,
        MessageId_MsgConnectionClosed,
        MessageId_MsgTypeGetKeyReq,
        MessageId_MsgTypeGetKeyRep,
    };
    static const char *extraTextFormatInfo = "\016\000\016\000\001\016\000\002\016\000\003\016\000\004\016\000\005\016\000\006\016\000\007\016\000\010\014\000\t\013\000\n\013\000\013\023\000\014\020\000\r\020\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MessageId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MessageId_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MessageId_IsValidValue(int32_t value__) {
  switch (value__) {
    case MessageId_MsgTypeInitReq:
    case MessageId_MsgTypeInitRep:
    case MessageId_MsgTypeAuthReq:
    case MessageId_MsgTypeAuthRep:
    case MessageId_MsgTypeSendReq:
    case MessageId_MsgTypeSendRep:
    case MessageId_MsgFeedbackReq:
    case MessageId_MsgFeedbackRep:
    case MessageId_MsgSendToUsr:
    case MessageId_MsgUserPing:
    case MessageId_MsgUserPong:
    case MessageId_MsgConnectionClosed:
    case MessageId_MsgTypeGetKeyReq:
    case MessageId_MsgTypeGetKeyRep:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum CloseFlag

GPBEnumDescriptor *CloseFlag_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "UserMadeClose\000TimeoutClose\000DuplicateClos"
        "e\000";
    static const int32_t values[] = {
        CloseFlag_UserMadeClose,
        CloseFlag_TimeoutClose,
        CloseFlag_DuplicateClose,
    };
    static const char *extraTextFormatInfo = "\003\000\r\000\001\014\000\002\016\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CloseFlag)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CloseFlag_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CloseFlag_IsValidValue(int32_t value__) {
  switch (value__) {
    case CloseFlag_UserMadeClose:
    case CloseFlag_TimeoutClose:
    case CloseFlag_DuplicateClose:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SendMessage

@implementation SendMessage

@dynamic appKey;
@dynamic from;
@dynamic to;
@dynamic chatType;
@dynamic msgType;
@dynamic createTime;
@dynamic content;
@dynamic audioDuration;
@dynamic thumbnail;
@dynamic sourceType;
@dynamic sequence;
@dynamic id_p;
@dynamic status;

typedef struct SendMessage__storage_ {
  uint32_t _has_storage_[1];
  uint32_t chatType;
  uint32_t msgType;
  uint32_t createTime;
  uint32_t audioDuration;
  uint32_t sourceType;
  uint32_t status;
  NSString *appKey;
  NSString *from;
  NSString *to;
  NSString *content;
  NSString *thumbnail;
  uint64_t sequence;
  uint64_t id_p;
} SendMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appKey",
        .dataTypeSpecific.className = NULL,
        .number = SendMessage_FieldNumber_AppKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendMessage__storage_, appKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = SendMessage_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendMessage__storage_, from),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = SendMessage_FieldNumber_To,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendMessage__storage_, to),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatType",
        .dataTypeSpecific.className = NULL,
        .number = SendMessage_FieldNumber_ChatType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SendMessage__storage_, chatType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.className = NULL,
        .number = SendMessage_FieldNumber_MsgType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SendMessage__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = SendMessage_FieldNumber_CreateTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SendMessage__storage_, createTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = SendMessage_FieldNumber_Content,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SendMessage__storage_, content),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audioDuration",
        .dataTypeSpecific.className = NULL,
        .number = SendMessage_FieldNumber_AudioDuration,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SendMessage__storage_, audioDuration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "thumbnail",
        .dataTypeSpecific.className = NULL,
        .number = SendMessage_FieldNumber_Thumbnail,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SendMessage__storage_, thumbnail),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sourceType",
        .dataTypeSpecific.className = NULL,
        .number = SendMessage_FieldNumber_SourceType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SendMessage__storage_, sourceType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sequence",
        .dataTypeSpecific.className = NULL,
        .number = SendMessage_FieldNumber_Sequence,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SendMessage__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SendMessage_FieldNumber_Id_p,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SendMessage__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = SendMessage_FieldNumber_Status,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(SendMessage__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendMessage class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\r\001F\000\002D\000\003B\000\004H\000\005G\000\006J\000\007G\000\010M\000\tI\000\nJ\000\013H\000\014\000Id\000\r"
        "F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessageReply

@implementation MessageReply

@dynamic errorCode;
@dynamic errorString;
@dynamic sequence;

typedef struct MessageReply__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorString;
  uint64_t sequence;
} MessageReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.className = NULL,
        .number = MessageReply_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageReply__storage_, errorCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "errorString",
        .dataTypeSpecific.className = NULL,
        .number = MessageReply_FieldNumber_ErrorString,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessageReply__storage_, errorString),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sequence",
        .dataTypeSpecific.className = NULL,
        .number = MessageReply_FieldNumber_Sequence,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MessageReply__storage_, sequence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageReply class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageReply__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001I\000\002K\000\003H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Feedback

@implementation Feedback

@dynamic appKey;
@dynamic userId;
@dynamic id_p;

typedef struct Feedback__storage_ {
  uint32_t _has_storage_[1];
  NSString *appKey;
  NSString *userId;
  uint64_t id_p;
} Feedback__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appKey",
        .dataTypeSpecific.className = NULL,
        .number = Feedback_FieldNumber_AppKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Feedback__storage_, appKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = Feedback_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Feedback__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Feedback_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Feedback__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Feedback class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Feedback__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001F\000\002F\000\003\000Id\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FeedbackAck

@implementation FeedbackAck

@dynamic errorCode;
@dynamic errorString;

typedef struct FeedbackAck__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorString;
} FeedbackAck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.className = NULL,
        .number = FeedbackAck_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FeedbackAck__storage_, errorCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "errorString",
        .dataTypeSpecific.className = NULL,
        .number = FeedbackAck_FieldNumber_ErrorString,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FeedbackAck__storage_, errorString),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FeedbackAck class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FeedbackAck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001I\000\002K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DuplicateLogin

@implementation DuplicateLogin

@dynamic appKey;
@dynamic id_p;
@dynamic serverid;
@dynamic ts;

typedef struct DuplicateLogin__storage_ {
  uint32_t _has_storage_[1];
  uint32_t serverid;
  NSString *appKey;
  NSString *id_p;
  int64_t ts;
} DuplicateLogin__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appKey",
        .dataTypeSpecific.className = NULL,
        .number = DuplicateLogin_FieldNumber_AppKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DuplicateLogin__storage_, appKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = DuplicateLogin_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DuplicateLogin__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serverid",
        .dataTypeSpecific.className = NULL,
        .number = DuplicateLogin_FieldNumber_Serverid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DuplicateLogin__storage_, serverid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "ts",
        .dataTypeSpecific.className = NULL,
        .number = DuplicateLogin_FieldNumber_Ts,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DuplicateLogin__storage_, ts),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DuplicateLogin class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DuplicateLogin__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001F\000\002\000Id\000\003H\000\004B\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HeartBeat

@implementation HeartBeat


typedef struct HeartBeat__storage_ {
  uint32_t _has_storage_[1];
} HeartBeat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HeartBeat class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(HeartBeat__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HeartBeatAck

@implementation HeartBeatAck


typedef struct HeartBeatAck__storage_ {
  uint32_t _has_storage_[1];
} HeartBeatAck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HeartBeatAck class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(HeartBeatAck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SyncMessage

@implementation SyncMessage

@dynamic appKey;
@dynamic userId;
@dynamic id_p;

typedef struct SyncMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *appKey;
  NSString *userId;
  uint64_t id_p;
} SyncMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appKey",
        .dataTypeSpecific.className = NULL,
        .number = SyncMessage_FieldNumber_AppKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SyncMessage__storage_, appKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = SyncMessage_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SyncMessage__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SyncMessage_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SyncMessage__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SyncMessage class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SyncMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001F\000\002F\000\003\000Id\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SyncMessageAck

@implementation SyncMessageAck


typedef struct SyncMessageAck__storage_ {
  uint32_t _has_storage_[1];
} SyncMessageAck__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SyncMessageAck class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(SyncMessageAck__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InitReq

@implementation InitReq

@dynamic userId;
@dynamic srcType;
@dynamic appKey;

typedef struct InitReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t srcType;
  NSString *userId;
  NSString *appKey;
} InitReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = InitReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InitReq__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "srcType",
        .dataTypeSpecific.className = NULL,
        .number = InitReq_FieldNumber_SrcType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InitReq__storage_, srcType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "appKey",
        .dataTypeSpecific.className = NULL,
        .number = InitReq_FieldNumber_AppKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InitReq__storage_, appKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InitReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InitReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001F\000\002G\000\003F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InitRep

@implementation InitRep

@dynamic nonce;

typedef struct InitRep__storage_ {
  uint32_t _has_storage_[1];
  NSString *nonce;
} InitRep__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nonce",
        .dataTypeSpecific.className = NULL,
        .number = InitRep_FieldNumber_Nonce,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InitRep__storage_, nonce),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InitRep class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InitRep__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AuthReq

@implementation AuthReq

@dynamic passphase;

typedef struct AuthReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *passphase;
} AuthReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "passphase",
        .dataTypeSpecific.className = NULL,
        .number = AuthReq_FieldNumber_Passphase,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AuthReq__storage_, passphase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AuthReq class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AuthReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001I\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GeneralReply

@implementation GeneralReply

@dynamic errorCode;
@dynamic errorString;

typedef struct GeneralReply__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
  NSString *errorString;
} GeneralReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.className = NULL,
        .number = GeneralReply_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GeneralReply__storage_, errorCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "errorString",
        .dataTypeSpecific.className = NULL,
        .number = GeneralReply_FieldNumber_ErrorString,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GeneralReply__storage_, errorString),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GeneralReply class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GeneralReply__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001I\000\002K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
